{"version":3,"sources":["pages/Resume/AccomplishmentsSection.js","pages/Resume/StrengthSection.js","pages/Resume/WorkExperienceSection.js","pages/Resume/TechExpertiseSection.js","pages/Resume/EducationCertificationsSection.js","App.js","serviceWorker.js","index.js"],"names":["AccomplishmentsSection","accomplishmentsList","className","map","accomplishment","key","StrengthListSection","strengthList","strength","WorkExperienceItem","workItem","company","roles","role","title","dates","jobDescription","description","accomplishments","jobAccomp","WorkExperienceSection","workExperienceList","jobItem","TechExpertiseSection","techExpertiseList","Object","keys","tech","i","word","charAt","toUpperCase","slice","join","EducationCertificationsSection","certificationsList","cert","App","useState","body","setBody","useEffect","a","fetch","result","json","fetchResumeData","href","target","rel","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.99b33ebc.chunk.js","sourcesContent":["import React from 'react';\n\n/*const AccomplishmentsList = [\n    'Designed and implemented production performance tracking tool for Pega Mobile giving development team nsights into real world performance',\n    'Implemented security improvements to meet end of year objectives in less than 3 months',\n    'Fixed production defect that eliminated approximately 240 hours of weekly employee rework and negative customer experiences',\n    'Led development team tasked with building an application to manage LOB tax documentation for Fortune 500 Financial Services company',\n    'Identified opportunity to reduce redundant API from 14,000 service calls to less than 50 service calls per day minimizing network traffic and failure points'\n];*/\n\nconst AccomplishmentsSection = ({ accomplishmentsList = [] }) => (\n    <section className=\"key-accomp\">\n        <div className=\"content-wrap item-details divider\">\n            <h2>Key Accomplishments</h2>\n            <ul>\n                { accomplishmentsList.map( (accomplishment, key) => (\n                    <li key={key}>{accomplishment}</li>\n                ))}\n            </ul>\n        </div>\n    </section>\n);\n\nexport default AccomplishmentsSection;\n","import React from \"react\";\n\n/*const strengthList = [\n    'Focused on Customers',\n    'Persuade Stakeholders',\n    'Building Relationships',\n    'Translate Between Business & Technical',\n    'Train / Mentor Team Members',\n    'Partner with Engineers',\n    'Quick Learner',\n    'Drive Results',\n    'Diagnose / Solve Complex Problems'\n];*/\n\nconst StrengthListSection = ( { strengthList = [] } ) => (\n    <div className=\"strength-grid\">\n        { strengthList.map( (strength, key) => (\n            <p className=\"strength\" key={key}>{strength}</p>\n        ))}\n    </div>\n);\n\nexport default StrengthListSection;","import React from \"react\";\n/*\nconst workExperienceList = [{\n    company: 'ACS Group (Client: Verizon)',\n    roles: [\n        {\n            title: 'Software Engineer',\n            dates: 'May 2019 - Present',\n        }\n    ],\n    jobDescription: {\n        description: 'Leveraged Pega framework as an orchestration engine in a microservices architecture. Coordinated with multiple teams and applications to deliver and test products from end to end. Supported testing in multiple environments while leading development within the project.',\n        accomplishments: []\n    }\n},{\n    company: 'Cox Automotive',\n    roles: [\n        {\n            title: 'Software Engineer',\n            dates: 'July 2017 - May 2019',\n        }\n    ],\n    jobDescription: {\n        description: 'Leveraged Pega Mobile framework and Javascript to deliver a mobile application for internal users. Worked directly with end users and business partners to investigate production issues and to identify functional improvements for the application. Actively worked with fellow team members to identify opportunities and solutions for team performance improvement.',\n        accomplishments: []\n    }\n},{\n    company: 'JPMorgan Chase',\n    roles: [\n            {\n            title: 'Application Developer Lead',\n            dates: 'May 2014 - July 2017',\n            },\n            {\n                title: 'Application Developer',\n                dates: 'January 2011 - May 2014',\n            }\n        ],\n    jobDescription: {\n            description: 'Advanced through promotions, culminating in a role as Applications Developer Lead managing multiple teams of up to 6 developers on multiple applications including customer critical applications and regulatory applications.',\n            accomplishments: [\n                'Instrumental during prioritization, planning, and design of applications on multiple simultaneous projects',\n                'Worked closely with business partners and business analysts to help gather requirements and providing design input',\n                'Managed teams working on back-end, customer critical application development projects',\n                'Worked on development team to deliver Pega PRPC applications resulting in savings of $450K+ yearly',\n                'Trained and mentored developers new to Pega PRPC to ensure an understanding of best practices and standards'\n            ]\n    }\n}];\n*/\nconst WorkExperienceItem = ( { workItem } ) => (\n        <section className=\"job-item\">\n        <div className=\"job-details\">\n            <h3 className=\"job-company\">{workItem.company}</h3>\n            {workItem.roles.map((role, key) => (\n                <div key={key}>\n                    <h4>{role.title}</h4>\n                    <p>{role.dates}</p>\n                </div>\n            ))}\n        </div>\n        <div className=\"job-summary\">\n            <p>{workItem.jobDescription.description}</p>\n            <ul>\n                {workItem.jobDescription.accomplishments.map((jobAccomp, key) => (\n                    <li key={key}>{jobAccomp}</li>\n                ))}\n\n            </ul>\n        </div>\n    </section>\n    );\n\nconst WorkExperienceSection = ( { workExperienceList = [] } ) => (\n    <section className=\"work-experience\">\n        <div className=\"content-wrap item-details divider\">\n            <h2>Work Experience</h2>\n            { workExperienceList.map( (jobItem, key ) => (\n                <WorkExperienceItem workItem={ jobItem } key={key}/>\n            ))}\n        </div>\n    </section>\n);\n\nexport default WorkExperienceSection;","import React from \"react\";\n\n/*const techExpertiseList = {\n    languages: ['Javascript', 'SQL', 'HTML/XML', 'JSON', 'CSS', 'Java', 'C++'],\n    frameworks: ['Node.js', 'Express', 'React', 'Pega PRPC (8.2,7.3,6.1,5.5)', 'Pega Mobile'],\n    software: ['Git', 'Intellij', 'AWS Cloud9', 'Oracle SQL Developer', 'Postman', 'Splunk', 'Jenkins', 'JIRA', 'SVN'],\n    servers: ['AWS', 'Tomcat', 'Websphere'],\n    databases: ['Oracle', 'Mongo', 'Postgres', 'DB2']\n};*/\n\nconst TechExpertiseSection = ({ techExpertiseList = {} }) => {\n    let capFirst = (word) => {\n        return word.charAt(0).toUpperCase() + word.slice(1);\n    };\n    return (\n        <section className=\"tech-expertise\">\n            <div className=\"content-wrap item-details divider\">\n                <h2>Technical Expertise</h2>\n                <div>\n                    { Object.keys(techExpertiseList).map( (tech, i) => (\n                        <div className=\"tech-grid\" key={i}>\n                            <p className=\"tech\">{ capFirst(tech) }</p>\n                            <p>{ techExpertiseList[tech].join(', ') } </p>\n                        </div>\n                    ))}\n                </div>\n            </div>\n        </section>\n    )\n};\n\nexport default TechExpertiseSection;\n","import React from \"react\";\n\n/*const certificationsList = ['Pega PRPC CSSA (2016)', 'Pega PRPC CSA (2011)'];*/\n\nconst EducationCertificationsSection = ({ certificationsList }) => (\n    <section className=\"education\">\n        <div className=\"content-wrap item-details\">\n            <h2>Education &amp; Certifications</h2>\n            <section>\n                <h3>Certifications</h3>\n                <ul>\n                    { certificationsList.map( (cert, key) => (\n                        <li key={key}>{cert}</li>\n                    ))}\n                </ul>\n            </section>\n            <section>\n            <h3>DeVry University - Columbus, OH</h3>\n            <p>Bachelor of Science in Computer Engineering Technology, (6/09)</p>\n            <ul>\n                <li>Dean's Scholarship</li>\n            </ul>\n            </section>\n        </div>\n    </section>\n\n);\n\nexport default EducationCertificationsSection;\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport AccomplishmentsSection from './pages/Resume/AccomplishmentsSection';\nimport StrengthListSection from './pages/Resume/StrengthSection';\nimport WorkExperienceSection from './pages/Resume/WorkExperienceSection';\nimport TechExpertiseSection from './pages/Resume/TechExpertiseSection';\nimport EducationCertificationsSection from './pages/Resume/EducationCertificationsSection';\n\nfunction App() {\n\n    const [body, setBody] = useState({ certificationsList: [] });\n\n    useEffect(() => {\n        const fetchResumeData = async() => {\n            const result = await fetch(`/api/resume`);\n            const body = await result.json();\n            setBody(body);\n        };\n\n        fetchResumeData();\n    }, []);\n\n    return (\n        <div>\n            <main>\n            {/* ***********************  ABOUT / PROFILE  *********************** */}\n                <header>\n                    <div className=\"content-wrap\">\n                        <h1>Joshua Singer</h1>\n                        <h2>Senior Software Engineer</h2>\n                        <StrengthListSection strengthList = { body.strengthList }/>\n                    </div>\n                </header>\n    {/* ***********************  Key Accomplishments  *********************** */}\n                <AccomplishmentsSection accomplishmentsList={ body.accomplishmentsList }/>\n    {/* ***********************  Technical Expertise  *********************** */}\n                <TechExpertiseSection techExpertiseList= { body.techExpertiseList }/>\n    {/* ***********************  WORK EXPERIENCE  *********************** */}\n                <WorkExperienceSection workExperienceList = { body.workExperienceList }/>\n    {/* ******************  EDUCATION & CERTIFICATIONS ****************** */}\n                <EducationCertificationsSection certificationsList={ body.certificationsList }/>\n    {/* *****************  CONTACT INFO / SOCIAL MEDIA  ***************** */}\n                <footer>\n                    <div className=\"content-wrap\">\n                        <h2>Let's Keep in Touch!</h2>\n                        {/* Social media and contact links. */}\n                        <ul className=\"contact-list\">\n                            <li><a href=\"https://www.linkedin.com/in/joshua-j-singer\" target=\"_blank\" rel=\"noopener noreferrer\">LinkedIn</a></li>\n                            <li><a href=\"mailto:joshua.j.singer79@gmail.com\">Email</a></li>\n                            <li><a href=\"http://www.joshuajsinger-se.com/resume\" target=\"_blank\" rel=\"noopener noreferrer\">Resume Web</a></li>\n                        </ul>\n                    </div>\n                </footer>\n            </main>\n        </div>\n    );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'whatwg-fetch';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}